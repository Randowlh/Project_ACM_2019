{
	"cpp":{
		"prefix": "treap",
		"body":[
			"struct fhq_treap",
			"mt19937 rnd(514114);",
			"{",
			"	struct node",
			"	{",
			"		node* l,* r;",
			"		int val, key;",
			"		int size;",
			"	};",
			"	node* root=NULL;",
			"	inline node* newnode(int val)",
			"	{",
			"		node* now=new node();",
			"		now->val=val;",
			"		now->key = rnd();",
			"		now->size = 1;",
			"		now->l = now->r = NULL;",
			"		return now;",
			"	}",
			"	inline void pushup(node * now)",
			"	int l=(now->l?now->l->size:0);",
			"		{",
			"		int r=(now->r?now->r->size:0);",
			"		now->size = l + r + 1;",
			"	}",
			"	void split(node* now, int val, node* &x,node* &y)",
			"	{",
			"		if (now==NULL)",
			"		{",
			"			x = y = NULL;",
			"			return;",
			"		}",
			"		else if (now->val <= val)",
			"		{",
			"			x = now;",
			"			split(now->r, val, now->r, y);",
			"		}",
			"		else",
			"		{",
			"			y = now;",
			"			split(now->l, val, x, now->l);",
			"		}",
			"		pushup(now);",
			"	}",
			"	node* merge(node* x,node* y)",
			"	{",
			"		if (x==NULL || y==NULL)",
			"			return (!x)?y:x;",
			"		if (x->key > y->key)",
			"		{",
			"			x->r = merge(x->r, y);",
			"			pushup(x);",
			"			return x;",
			"		}",
			"		else",
			"		{",
			"			y->l = merge(x, y->l);",
			"			pushup(y);",
			"			return y;",
			"		}",
			"	}",
			"	inline void insert(int val)",
			"	{",
			"		node* x,* y;",
			"		split(root, val, x, y);",
			"		root = merge(merge(x, newnode(val)), y);",
			"	}",
			"	inline void del(int val)",
			"	{",
			"		node* x,* y, *z,*t;",
			"		split(root, val - 1, x, y);",
			"		split(y, val, y, z);",
			"		t=y;",
			"		y = merge(y->l, y->r);",
			"		delete t;",
			"		root = merge(merge(x, y), z);",
			"	}",
			"	inline int getrk(int num)",
			"	{",
			"		node* x, *y;",
			"		split(root, num - 1, x, y);",
			"		int ans =(x?x->size:0) + 1;",
			"		root = merge(x, y);",
			"		return ans;",
			"	}",
			"	inline int getnum(int rank)",
			"	{",
			"		node* now=root;",
			"		while(now)",
			"		{",
			"			int t=(now->l==NULL?0:now->l->size);",
			"			if(t+1==rank)",
			"			break;",
			"			else if(t>=rank)",
			"				now=now->l;",
			"			else",
			"			{",
			"				rank-=t+1;",
			"				now=now->r;",
			"			}",
			"		}",
			"		return now->val;",
			"	}",
			"	inline int pre(int val)",
			"	{",
			"		node * x,* y;",
			"		int ans;",
			"		split(root, val - 1, x, y);",
			"		node* t = x;",
			"		while (t->r)",
			"			t = t->r;",
			"		ans = t->val;",
			"		root = merge(x, y);",
			"		return ans;",
			"	}",
			"	inline int aft(int val)",
			"	{",
			"		node* x,* y;",
			"		int ans;",
			"		split(root, val, x, y);",
			"		node* t = y;",
			"		while (t->l){",
			"			t = t->l;",
			"		}",
			"		ans = t->val;",
			"		root = merge(x, y);",
			"		return ans;
			"	}",
			"} T;",
		],
		"description": "fhq_treap"
	}
}